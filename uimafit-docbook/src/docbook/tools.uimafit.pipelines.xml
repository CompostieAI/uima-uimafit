<chapter id="ugr.tools.uimafit.pipelines">
  <title>Pipelines</title>
  <para>UIMA is a component-based architecture that allows to compose various processing components
    into a complex processing pipeline. A pipeline typically involves a <emphasis>collection
      reader</emphasis> which ingests documents and <emphasis>analysis engines</emphasis> that do
    the actual processing.</para>
  <para>Normally, you would run a pipeline using a UIMA Collection Processing Engine or using UIMA
    AS. uimaFIT offers a third alternative that is much simpler to use and well suited for embedding
    UIMA pipelines into applications or for writing tests.</para>
  <para>As uimaFIT does not supply any readers or processing components, we just assume that we have
    written three components:</para>
  <itemizedlist>
    <listitem>
      <para><classname>TextReader</classname> - reads text files from a directory</para>
    </listitem>
    <listitem>
      <para><classname>Tokenizer</classname> - annotates tokens</para>
    </listitem>
    <listitem>
      <para><classname>TokenFrequencyWriter</classname> - writes a list of tokens and their
        frequency to a file</para>
    </listitem>
  </itemizedlist>
  <para>We create descriptors for all components and run them as a pipeline:</para>
  <programlisting>CollectionReaderDescription reader = 
  CollectionReaderFactory.createReaderDescription(
    TextReader.class, 
    TextReader.PARAM_INPUT, "/home/uimafit/documents");

AnalysisEngineDescription tokenizer = 
  AnalysisEngineFactory.createEngineDescription(
    Tokenizer.class);

AnalysisEngineDescription tokenFrequencyWriter = 
  AnalysisEngineFactory.createEngineDescription(
    TokenFrequencyWriter.class, 
    TokenFrequencyWriter.PARAM_OUTPUT, "counts.txt");

SimplePipeline.runPipeline(reader, tokenizer, writer);</programlisting>
</chapter>
